// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// PromptHub Module

model Prompt {
  id        String       @id @default(cuid())
  authorId  String // UWAGA: tylko ID użytkownika, bez relacji!
  title     String       @db.VarChar(100)
  content   String       @db.Text
  isPublic  Boolean      @default(false)
  status    PromptStatus @default(DRAFT)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  // Soft delete
  isDeleted Boolean      @default(false)
  deletedAt DateTime?

  catalogs  PromptCatalogPrompt[]
  PromptTag PromptTag[]
}

model PromptCatalog {
  id        String   @id @default(cuid())
  ownerId   String // UWAGA: tylko ID użytkownika, bez relacji!
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now())

  prompts PromptCatalogPrompt[]
}

model PromptCatalogItem {
  id        String   @id @default(cuid())
  catalogId String
  promptId  String
  addedAt   DateTime @default(now())

  @@unique([catalogId, promptId])
}

/**
 * @depracated
 */
model PromptCatalogPrompt {
  id        String   @id @default(cuid())
  catalogId String
  promptId  String
  addedAt   DateTime @default(now())

  catalog PromptCatalog @relation(fields: [catalogId], references: [id], onDelete: Cascade)
  prompt  Prompt        @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([catalogId, promptId])
}

enum PromptStatus {
  DRAFT
  PUBLISHED
}

model PromptListItemView {
  id             String   @id // promptId
  title          String
  contentPreview String   @db.VarChar(200) // np. pierwsze 160–200 znaków
  copiedCount    Int
  likedCount     Int
  viewCount      Int
  createdAt      DateTime
  isPublic       Boolean
  status         String

  authorId        String
  authorName      String
  authorAvatarUrl String?

  @@index([createdAt])
  @@index([copiedCount])
  @@index([likedCount])
  @@index([viewCount])
  @@index([authorId])
  @@index([isPublic])
  @@index([status])
}

model PromptUserPublic {
  id        String  @id
  name      String
  avatarUrl String?
}

model PromptDetailsView {
  id        String   @id
  title     String
  content   String   @db.Text
  isPublic  Boolean
  status    String
  createdAt DateTime

  likedCount  Int
  copiedCount Int
  viewCount   Int

  authorId        String
  authorName      String
  authorAvatarUrl String?

  tagValues String[]

  @@index([authorId])
}

model PromptCatalogView {
  id         String   @id @default(cuid())
  userId     String
  name       String
  createdAt  DateTime @default(now())
  countItems Int?     @default(0)

  @@index([userId])
  @@index([name])
}

model PromptCatalogItemView {
  promptId    String
  promptTitle String
  catalogId   String
  catalogName String
  addedAt     DateTime

  @@id([promptId, catalogId])
  @@index([catalogId])
}

model PromptTag {
  promptId String
  tagValue String
  addedAt  DateTime @default(now())

  // Relacja do Prompt
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@id([promptId, tagValue])
  @@index([tagValue])
}

//===================================================

// Prompt Report
model PromptReport {
  id         String             @id @default(cuid())
  promptId   String
  reporterId String
  reason     String             @db.VarChar(500)
  status     PromptReportStatus @default(PENDING)
  createdAt  DateTime           @default(now())

  @@unique([promptId, reporterId]) // jeden user może zgłosić jeden prompt tylko raz
  @@index([promptId])
  @@index([reporterId])
}

enum PromptReportStatus {
  PENDING
  ACCEPTED
  REJECTED
}

//===================================================

// Prompt Vote
model PromptVote {
  id        String   @id @default(cuid())
  promptId  String
  userId    String
  voteType  String // 'UP' lub 'DOWN'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([promptId, userId])
}

model PromptVoteEntry {
  userId   String
  promptId String
  vote     Int // 1 (like), -1 (dislike)
  votedAt  DateTime

  @@id([userId, promptId])
  @@index([promptId])
}

//===================================================

// Favorites
model FavoritePrompt {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  createdAt DateTime @default(now())

  @@unique([userId, promptId])
  @@index([userId])
}

model FavoritePromptEntry {
  userId    String
  promptId  String
  title     String
  createdAt DateTime

  authorId        String
  authorName      String
  authorAvatarUrl String?

  @@id([userId, promptId])
  @@index([authorId])
}

model FavoriteUserPublicView {
  id        String  @id @default(cuid())
  name      String
  avatarUrl String?
}

model FavoritePromptView {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime
  authorId  String
}

//===================================================

// Search
model SearchPromptEntry {
  id              String   @id
  title           String   @db.VarChar(200)
  content         String   @db.Text
  authorId        String
  authorName      String   @db.VarChar(100)
  authorAvatarUrl String?  @db.VarChar(255)
  isPublic        Boolean  @default(false)
  status          String   @db.VarChar(20)
  copiedCount     Int      @default(0)
  likedCount      Int      @default(0)
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // tags SearchPromptTag[]

  @@index([title])
  @@index([content])
  @@index([copiedCount])
  @@index([likedCount])
  @@index([viewCount])
}

// model SearchPromptTag {
//   id       String @id @default(cuid())
//   promptId String
//   name     String @db.VarChar(50)
//
//   prompt SearchPromptEntry @relation(fields: [promptId], references: [id], onDelete: Cascade)
//
//   @@unique([promptId, name])
//   @@index([name])
// }

model UserSearchView {
  id        String  @id
  name      String
  avatarUrl String?
}

//===================================================

// Notifications
model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payload   Json // dane zależne od typu notyfikacji
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

//===================================================

// Accounts
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatarUrl String?
  googleId  String
  provider  String   @default("google")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//===================================================

// Tags
model Tag {
  id        String   @id @default(cuid())
  value     String   @unique // np. "ai-tools"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([isActive])
}

model TagView {
  id         String  @id
  value      String
  isActive   Boolean
  usageCount Int

  @@index([isActive])
  @@index([value])
}

//===================================================
