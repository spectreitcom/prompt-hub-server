// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// PromptHub Module

model Prompt {
  id        String       @id @default(cuid())
  authorId  String // UWAGA: tylko ID użytkownika, bez relacji!
  title     String       @db.VarChar(100)
  content   String       @db.Text
  isPublic  Boolean      @default(false)
  status    PromptStatus @default(DRAFT)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  // Soft delete
  isDeleted Boolean      @default(false)
  deletedAt DateTime?

  catalogs PromptCatalogPrompt[]
}

model PromptCatalog {
  id        String   @id @default(cuid())
  ownerId   String // UWAGA: tylko ID użytkownika, bez relacji!
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now())

  prompts PromptCatalogPrompt[]
}

model PromptCatalogItem {
  id        String   @id @default(cuid())
  catalogId String
  promptId  String
  addedAt   DateTime @default(now())

  @@unique([catalogId, promptId])
}

model PromptCatalogPrompt {
  id        String   @id @default(cuid())
  catalogId String
  promptId  String
  addedAt   DateTime @default(now())

  catalog PromptCatalog @relation(fields: [catalogId], references: [id], onDelete: Cascade)
  prompt  Prompt        @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([catalogId, promptId])
}

enum PromptStatus {
  DRAFT
  PUBLISHED
}

//===================================================

// Prompt Report
model PromptReport {
  id         String             @id @default(cuid())
  promptId   String
  reporterId String
  reason     String             @db.VarChar(500)
  status     PromptReportStatus @default(PENDING)
  createdAt  DateTime           @default(now())

  @@unique([promptId, reporterId]) // jeden user może zgłosić jeden prompt tylko raz
  @@index([promptId])
  @@index([reporterId])
}

enum PromptReportStatus {
  PENDING
  ACCEPTED
  REJECTED
}

//===================================================

// Prompt Vote
model PromptVote {
  id        String   @id @default(cuid())
  promptId  String
  userId    String
  voteType  String // 'UP' lub 'DOWN'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([promptId, userId])
}

//===================================================

// Favorites
model FavoritePrompt {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  createdAt DateTime @default(now())

  @@unique([userId, promptId])
  @@index([userId])
}

//===================================================

// Search
model SearchPromptEntry {
  id          String   @id
  title       String   @db.VarChar(200)
  content     String   @db.Text
  authorId    String
  isPublic    Boolean  @default(false)
  status      String   @db.VarChar(20)
  copiedCount Int      @default(0)
  likedCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tags SearchPromptTag[]
}

model SearchPromptTag {
  id       String @id @default(cuid())
  promptId String
  name     String @db.VarChar(50)

  prompt SearchPromptEntry @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, name])
  @@index([name])
}

//===================================================
